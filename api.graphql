### This file was generated by Nexus Schema
### Do not make changes to this file directly


input CreateProjectInput {
  authorId: String!
  description: String!
  preview: String!
  repoLink: String!
  siteLink: String!
  tags: [String!]
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Favorite actions"""
enum FavoriteAction {
  FAVORITE
  UNDO
}

input FavoriteProjectInput {
  action: FavoriteAction!
  projectId: String!
  userId: String!
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createProject(input: CreateProjectInput): Project
  deleteManyProjects(projectIds: [String!]!): Json
  deleteProject(projectId: String!): String
  favoriteProject(input: FavoriteProjectInput): Project
  login(email: String!, password: String!): Json
  reactToProject(input: ReactToProjectInput): Project
  signUp(email: String!, lastName: String!, name: String!, password: String!): Json
  updateProject(input: UpdateProjectInput, projectId: String!): Project
  updateProjectStatus(isApproved: Boolean!, projectId: String!): Project
  updateUser(input: UpdateUsertInput, userId: String!): User
  uploadImage(path: String!): Json
}

type Project {
  author: User!
  createdAt: DateTime!
  description: String!
  favorites(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  id: String!
  isApproved: Boolean!
  likes(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  preview: String!
  repoLink: String!
  siteLink: String!
  tags: [String!]!
  title: String!
}

"""Actions available to the user"""
enum ProjectAction {
  DISLIKE
  LIKE
}

type ProjectsResponse {
  nextCursor: String
  prevCursor: String
  results: [Project!]
  totalCount: Int
}

input ProjectWhereUniqueInput {
  id: String
}

type Query {
  """Get all approved projects"""
  adminGetNotApprovedProjects(cursor: String): ProjectsResponse
  getCurrentUser: User

  """Get my favorite projects"""
  getMyFavoriteProjects(cursor: String): ProjectsResponse

  """Get all my projects"""
  getMyProjects(cursor: String): ProjectsResponse
  getProject(id: String!): Project

  """Get all approved projects"""
  getProjects(cursor: String): ProjectsResponse
  getUser(id: String!): User
  getUsers: [User!]
}

input ReactToProjectInput {
  action: ProjectAction!
  projectId: String!
  userId: String!
}

enum Role {
  ADMIN
  USER
}

input UpdateProjectInput {
  description: String
  preview: String
  repoLink: String
  siteLink: String
  tags: [String!]
  title: String
}

"""Update the user information"""
input UpdateUsertInput {
  discord: String
  email: String
  github: String
  lastName: String
  name: String
  role: String
}

type User {
  discord: String
  email: String!
  favoriteProjects(after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int): [Project!]!
  github: String
  id: String!
  lastName: String!
  name: String!
  projects(after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int): [Project!]!
  projectsLiked(after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int): [Project!]!
  role: Role!
}

input UserWhereUniqueInput {
  id: String
}
